//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace CtlLibraryBindings {

public class CtlLibrary {
  public static ctl_result_t ctlInit(ctl_init_args_t pInitDesc, SWIGTYPE_p_p__ctl_api_handle_t phAPIHandle) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlInit(ctl_init_args_t.getCPtr(pInitDesc), SWIGTYPE_p_p__ctl_api_handle_t.getCPtr(phAPIHandle));
    return ret;
  }

  public static ctl_result_t ctlClose(SWIGTYPE_p__ctl_api_handle_t hAPIHandle) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlClose(SWIGTYPE_p__ctl_api_handle_t.getCPtr(hAPIHandle));
    return ret;
  }

  public static ctl_result_t ctlSetRuntimePath(ctl_runtime_path_args_t pArgs) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlSetRuntimePath(ctl_runtime_path_args_t.getCPtr(pArgs));
    return ret;
  }

  public static ctl_result_t ctlWaitForPropertyChange(SWIGTYPE_p__ctl_device_adapter_handle_t hDeviceAdapter, ctl_wait_property_change_args_t pArgs) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlWaitForPropertyChange(SWIGTYPE_p__ctl_device_adapter_handle_t.getCPtr(hDeviceAdapter), ctl_wait_property_change_args_t.getCPtr(pArgs));
    return ret;
  }

  public static ctl_result_t ctlReservedCall(SWIGTYPE_p__ctl_device_adapter_handle_t hDeviceAdapter, ctl_reserved_args_t pArgs) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlReservedCall(SWIGTYPE_p__ctl_device_adapter_handle_t.getCPtr(hDeviceAdapter), ctl_reserved_args_t.getCPtr(pArgs));
    return ret;
  }

  public static ctl_result_t ctlGetSupported3DCapabilities(SWIGTYPE_p__ctl_device_adapter_handle_t hDAhandle, ctl_3d_feature_caps_t pFeatureCaps) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlGetSupported3DCapabilities(SWIGTYPE_p__ctl_device_adapter_handle_t.getCPtr(hDAhandle), ctl_3d_feature_caps_t.getCPtr(pFeatureCaps));
    return ret;
  }

  public static ctl_result_t ctlGetSet3DFeature(SWIGTYPE_p__ctl_device_adapter_handle_t hDAhandle, ctl_3d_feature_getset_t pFeature) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlGetSet3DFeature(SWIGTYPE_p__ctl_device_adapter_handle_t.getCPtr(hDAhandle), ctl_3d_feature_getset_t.getCPtr(pFeature));
    return ret;
  }

  public static ctl_result_t ctlCheckDriverVersion(SWIGTYPE_p__ctl_device_adapter_handle_t hDeviceAdapter, uint version_info) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlCheckDriverVersion(SWIGTYPE_p__ctl_device_adapter_handle_t.getCPtr(hDeviceAdapter), version_info);
    return ret;
  }

  public static ctl_result_t ctlEnumerateDevices(SWIGTYPE_p__ctl_api_handle_t hAPIHandle, SWIGTYPE_p_unsigned_int pCount, SWIGTYPE_p_p__ctl_device_adapter_handle_t phDevices) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlEnumerateDevices(SWIGTYPE_p__ctl_api_handle_t.getCPtr(hAPIHandle), SWIGTYPE_p_unsigned_int.getCPtr(pCount), SWIGTYPE_p_p__ctl_device_adapter_handle_t.getCPtr(phDevices));
    return ret;
  }

  public static ctl_result_t ctlEnumerateDisplayOutputs(SWIGTYPE_p__ctl_device_adapter_handle_t hDeviceAdapter, SWIGTYPE_p_unsigned_int pCount, SWIGTYPE_p_p__ctl_display_output_handle_t phDisplayOutputs) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlEnumerateDisplayOutputs(SWIGTYPE_p__ctl_device_adapter_handle_t.getCPtr(hDeviceAdapter), SWIGTYPE_p_unsigned_int.getCPtr(pCount), SWIGTYPE_p_p__ctl_display_output_handle_t.getCPtr(phDisplayOutputs));
    return ret;
  }

  public static ctl_result_t ctlEnumerateI2CPinPairs(SWIGTYPE_p__ctl_device_adapter_handle_t hDeviceAdapter, SWIGTYPE_p_unsigned_int pCount, SWIGTYPE_p_p__ctl_i2c_pin_pair_handle_t phI2cPinPairs) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlEnumerateI2CPinPairs(SWIGTYPE_p__ctl_device_adapter_handle_t.getCPtr(hDeviceAdapter), SWIGTYPE_p_unsigned_int.getCPtr(pCount), SWIGTYPE_p_p__ctl_i2c_pin_pair_handle_t.getCPtr(phI2cPinPairs));
    return ret;
  }

  public static ctl_result_t ctlGetDeviceProperties(SWIGTYPE_p__ctl_device_adapter_handle_t hDAhandle, ctl_device_adapter_properties_t pProperties) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlGetDeviceProperties(SWIGTYPE_p__ctl_device_adapter_handle_t.getCPtr(hDAhandle), ctl_device_adapter_properties_t.getCPtr(pProperties));
    return ret;
  }

  public static ctl_result_t ctlGetDisplayProperties(SWIGTYPE_p__ctl_display_output_handle_t hDisplayOutput, ctl_display_properties_t pProperties) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlGetDisplayProperties(SWIGTYPE_p__ctl_display_output_handle_t.getCPtr(hDisplayOutput), ctl_display_properties_t.getCPtr(pProperties));
    return ret;
  }

  public static ctl_result_t ctlGetAdaperDisplayEncoderProperties(SWIGTYPE_p__ctl_display_output_handle_t hDisplayOutput, ctl_adapter_display_encoder_properties_t pProperties) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlGetAdaperDisplayEncoderProperties(SWIGTYPE_p__ctl_display_output_handle_t.getCPtr(hDisplayOutput), ctl_adapter_display_encoder_properties_t.getCPtr(pProperties));
    return ret;
  }

  public static ctl_result_t ctlGetZeDevice(SWIGTYPE_p__ctl_device_adapter_handle_t hDAhandle, SWIGTYPE_p_void pZeDevice, SWIGTYPE_p_p_void hInstance) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlGetZeDevice(SWIGTYPE_p__ctl_device_adapter_handle_t.getCPtr(hDAhandle), SWIGTYPE_p_void.getCPtr(pZeDevice), SWIGTYPE_p_p_void.getCPtr(hInstance));
    return ret;
  }

  public static ctl_result_t ctlGetSharpnessCaps(SWIGTYPE_p__ctl_display_output_handle_t hDisplayOutput, ctl_sharpness_caps_t pSharpnessCaps) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlGetSharpnessCaps(SWIGTYPE_p__ctl_display_output_handle_t.getCPtr(hDisplayOutput), ctl_sharpness_caps_t.getCPtr(pSharpnessCaps));
    return ret;
  }

  public static ctl_result_t ctlGetCurrentSharpness(SWIGTYPE_p__ctl_display_output_handle_t hDisplayOutput, ctl_sharpness_settings_t pSharpnessSettings) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlGetCurrentSharpness(SWIGTYPE_p__ctl_display_output_handle_t.getCPtr(hDisplayOutput), ctl_sharpness_settings_t.getCPtr(pSharpnessSettings));
    return ret;
  }

  public static ctl_result_t ctlSetCurrentSharpness(SWIGTYPE_p__ctl_display_output_handle_t hDisplayOutput, ctl_sharpness_settings_t pSharpnessSettings) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlSetCurrentSharpness(SWIGTYPE_p__ctl_display_output_handle_t.getCPtr(hDisplayOutput), ctl_sharpness_settings_t.getCPtr(pSharpnessSettings));
    return ret;
  }

  public static ctl_result_t ctlI2CAccess(SWIGTYPE_p__ctl_display_output_handle_t hDisplayOutput, ctl_i2c_access_args_t pI2cAccessArgs) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlI2CAccess(SWIGTYPE_p__ctl_display_output_handle_t.getCPtr(hDisplayOutput), ctl_i2c_access_args_t.getCPtr(pI2cAccessArgs));
    return ret;
  }

  public static ctl_result_t ctlI2CAccessOnPinPair(SWIGTYPE_p__ctl_i2c_pin_pair_handle_t hI2cPinPair, ctl_i2c_access_pinpair_args_t pI2cAccessArgs) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlI2CAccessOnPinPair(SWIGTYPE_p__ctl_i2c_pin_pair_handle_t.getCPtr(hI2cPinPair), ctl_i2c_access_pinpair_args_t.getCPtr(pI2cAccessArgs));
    return ret;
  }

  public static ctl_result_t ctlAUXAccess(SWIGTYPE_p__ctl_display_output_handle_t hDisplayOutput, ctl_aux_access_args_t pAuxAccessArgs) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlAUXAccess(SWIGTYPE_p__ctl_display_output_handle_t.getCPtr(hDisplayOutput), ctl_aux_access_args_t.getCPtr(pAuxAccessArgs));
    return ret;
  }

  public static ctl_result_t ctlGetPowerOptimizationCaps(SWIGTYPE_p__ctl_display_output_handle_t hDisplayOutput, ctl_power_optimization_caps_t pPowerOptimizationCaps) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlGetPowerOptimizationCaps(SWIGTYPE_p__ctl_display_output_handle_t.getCPtr(hDisplayOutput), ctl_power_optimization_caps_t.getCPtr(pPowerOptimizationCaps));
    return ret;
  }

  public static ctl_result_t ctlGetPowerOptimizationSetting(SWIGTYPE_p__ctl_display_output_handle_t hDisplayOutput, ctl_power_optimization_settings_t pPowerOptimizationSettings) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlGetPowerOptimizationSetting(SWIGTYPE_p__ctl_display_output_handle_t.getCPtr(hDisplayOutput), ctl_power_optimization_settings_t.getCPtr(pPowerOptimizationSettings));
    return ret;
  }

  public static ctl_result_t ctlSetPowerOptimizationSetting(SWIGTYPE_p__ctl_display_output_handle_t hDisplayOutput, ctl_power_optimization_settings_t pPowerOptimizationSettings) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlSetPowerOptimizationSetting(SWIGTYPE_p__ctl_display_output_handle_t.getCPtr(hDisplayOutput), ctl_power_optimization_settings_t.getCPtr(pPowerOptimizationSettings));
    return ret;
  }

  public static ctl_result_t ctlSetBrightnessSetting(SWIGTYPE_p__ctl_display_output_handle_t hDisplayOutput, ctl_set_brightness_t pSetBrightnessSetting) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlSetBrightnessSetting(SWIGTYPE_p__ctl_display_output_handle_t.getCPtr(hDisplayOutput), ctl_set_brightness_t.getCPtr(pSetBrightnessSetting));
    return ret;
  }

  public static ctl_result_t ctlGetBrightnessSetting(SWIGTYPE_p__ctl_display_output_handle_t hDisplayOutput, ctl_get_brightness_t pGetBrightnessSetting) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlGetBrightnessSetting(SWIGTYPE_p__ctl_display_output_handle_t.getCPtr(hDisplayOutput), ctl_get_brightness_t.getCPtr(pGetBrightnessSetting));
    return ret;
  }

  public static ctl_result_t ctlPixelTransformationGetConfig(SWIGTYPE_p__ctl_display_output_handle_t hDisplayOutput, ctl_pixtx_pipe_get_config_t pPixTxGetConfigArgs) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlPixelTransformationGetConfig(SWIGTYPE_p__ctl_display_output_handle_t.getCPtr(hDisplayOutput), ctl_pixtx_pipe_get_config_t.getCPtr(pPixTxGetConfigArgs));
    return ret;
  }

  public static ctl_result_t ctlPixelTransformationSetConfig(SWIGTYPE_p__ctl_display_output_handle_t hDisplayOutput, ctl_pixtx_pipe_set_config_t pPixTxSetConfigArgs) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlPixelTransformationSetConfig(SWIGTYPE_p__ctl_display_output_handle_t.getCPtr(hDisplayOutput), ctl_pixtx_pipe_set_config_t.getCPtr(pPixTxSetConfigArgs));
    return ret;
  }

  public static ctl_result_t ctlPanelDescriptorAccess(SWIGTYPE_p__ctl_display_output_handle_t hDisplayOutput, ctl_panel_descriptor_access_args_t pPanelDescriptorAccessArgs) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlPanelDescriptorAccess(SWIGTYPE_p__ctl_display_output_handle_t.getCPtr(hDisplayOutput), ctl_panel_descriptor_access_args_t.getCPtr(pPanelDescriptorAccessArgs));
    return ret;
  }

  public static ctl_result_t ctlGetSupportedRetroScalingCapability(SWIGTYPE_p__ctl_device_adapter_handle_t hDAhandle, ctl_retro_scaling_caps_t pRetroScalingCaps) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlGetSupportedRetroScalingCapability(SWIGTYPE_p__ctl_device_adapter_handle_t.getCPtr(hDAhandle), ctl_retro_scaling_caps_t.getCPtr(pRetroScalingCaps));
    return ret;
  }

  public static ctl_result_t ctlGetSetRetroScaling(SWIGTYPE_p__ctl_device_adapter_handle_t hDAhandle, ctl_retro_scaling_settings_t pGetSetRetroScalingType) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlGetSetRetroScaling(SWIGTYPE_p__ctl_device_adapter_handle_t.getCPtr(hDAhandle), ctl_retro_scaling_settings_t.getCPtr(pGetSetRetroScalingType));
    return ret;
  }

  public static ctl_result_t ctlGetSupportedScalingCapability(SWIGTYPE_p__ctl_display_output_handle_t hDisplayOutput, ctl_scaling_caps_t pScalingCaps) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlGetSupportedScalingCapability(SWIGTYPE_p__ctl_display_output_handle_t.getCPtr(hDisplayOutput), ctl_scaling_caps_t.getCPtr(pScalingCaps));
    return ret;
  }

  public static ctl_result_t ctlGetCurrentScaling(SWIGTYPE_p__ctl_display_output_handle_t hDisplayOutput, ctl_scaling_settings_t pGetCurrentScalingType) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlGetCurrentScaling(SWIGTYPE_p__ctl_display_output_handle_t.getCPtr(hDisplayOutput), ctl_scaling_settings_t.getCPtr(pGetCurrentScalingType));
    return ret;
  }

  public static ctl_result_t ctlSetCurrentScaling(SWIGTYPE_p__ctl_display_output_handle_t hDisplayOutput, ctl_scaling_settings_t pSetScalingType) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlSetCurrentScaling(SWIGTYPE_p__ctl_display_output_handle_t.getCPtr(hDisplayOutput), ctl_scaling_settings_t.getCPtr(pSetScalingType));
    return ret;
  }

  public static ctl_result_t ctlGetLACEConfig(SWIGTYPE_p__ctl_display_output_handle_t hDisplayOutput, ctl_lace_config_t pLaceConfig) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlGetLACEConfig(SWIGTYPE_p__ctl_display_output_handle_t.getCPtr(hDisplayOutput), ctl_lace_config_t.getCPtr(pLaceConfig));
    return ret;
  }

  public static ctl_result_t ctlSetLACEConfig(SWIGTYPE_p__ctl_display_output_handle_t hDisplayOutput, ctl_lace_config_t pLaceConfig) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlSetLACEConfig(SWIGTYPE_p__ctl_display_output_handle_t.getCPtr(hDisplayOutput), ctl_lace_config_t.getCPtr(pLaceConfig));
    return ret;
  }

  public static ctl_result_t ctlSoftwarePSR(SWIGTYPE_p__ctl_display_output_handle_t hDisplayOutput, ctl_sw_psr_settings_t pSoftwarePsrSetting) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlSoftwarePSR(SWIGTYPE_p__ctl_display_output_handle_t.getCPtr(hDisplayOutput), ctl_sw_psr_settings_t.getCPtr(pSoftwarePsrSetting));
    return ret;
  }

  public static ctl_result_t ctlGetIntelArcSyncInfoForMonitor(SWIGTYPE_p__ctl_display_output_handle_t hDisplayOutput, ctl_intel_arc_sync_monitor_params_t pIntelArcSyncMonitorParams) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlGetIntelArcSyncInfoForMonitor(SWIGTYPE_p__ctl_display_output_handle_t.getCPtr(hDisplayOutput), ctl_intel_arc_sync_monitor_params_t.getCPtr(pIntelArcSyncMonitorParams));
    return ret;
  }

  public static ctl_result_t ctlEnumerateMuxDevices(SWIGTYPE_p__ctl_api_handle_t hAPIHandle, SWIGTYPE_p_unsigned_int pCount, SWIGTYPE_p_p__ctl_mux_output_handle_t phMuxDevices) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlEnumerateMuxDevices(SWIGTYPE_p__ctl_api_handle_t.getCPtr(hAPIHandle), SWIGTYPE_p_unsigned_int.getCPtr(pCount), SWIGTYPE_p_p__ctl_mux_output_handle_t.getCPtr(phMuxDevices));
    return ret;
  }

  public static ctl_result_t ctlGetMuxProperties(SWIGTYPE_p__ctl_mux_output_handle_t hMuxDevice, ctl_mux_properties_t pMuxProperties) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlGetMuxProperties(SWIGTYPE_p__ctl_mux_output_handle_t.getCPtr(hMuxDevice), ctl_mux_properties_t.getCPtr(pMuxProperties));
    return ret;
  }

  public static ctl_result_t ctlSwitchMux(SWIGTYPE_p__ctl_mux_output_handle_t hMuxDevice, SWIGTYPE_p__ctl_display_output_handle_t hInactiveDisplayOutput) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlSwitchMux(SWIGTYPE_p__ctl_mux_output_handle_t.getCPtr(hMuxDevice), SWIGTYPE_p__ctl_display_output_handle_t.getCPtr(hInactiveDisplayOutput));
    return ret;
  }

  public static ctl_result_t ctlGetIntelArcSyncProfile(SWIGTYPE_p__ctl_display_output_handle_t hDisplayOutput, ctl_intel_arc_sync_profile_params_t pIntelArcSyncProfileParams) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlGetIntelArcSyncProfile(SWIGTYPE_p__ctl_display_output_handle_t.getCPtr(hDisplayOutput), ctl_intel_arc_sync_profile_params_t.getCPtr(pIntelArcSyncProfileParams));
    return ret;
  }

  public static ctl_result_t ctlSetIntelArcSyncProfile(SWIGTYPE_p__ctl_display_output_handle_t hDisplayOutput, ctl_intel_arc_sync_profile_params_t pIntelArcSyncProfileParams) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlSetIntelArcSyncProfile(SWIGTYPE_p__ctl_display_output_handle_t.getCPtr(hDisplayOutput), ctl_intel_arc_sync_profile_params_t.getCPtr(pIntelArcSyncProfileParams));
    return ret;
  }

  public static ctl_result_t ctlEdidManagement(SWIGTYPE_p__ctl_display_output_handle_t hDisplayOutput, ctl_edid_management_args_t pEdidManagementArgs) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlEdidManagement(SWIGTYPE_p__ctl_display_output_handle_t.getCPtr(hDisplayOutput), ctl_edid_management_args_t.getCPtr(pEdidManagementArgs));
    return ret;
  }

  public static ctl_result_t ctlGetSetCustomMode(SWIGTYPE_p__ctl_display_output_handle_t hDisplayOutput, ctl_get_set_custom_mode_args_t pCustomModeArgs) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlGetSetCustomMode(SWIGTYPE_p__ctl_display_output_handle_t.getCPtr(hDisplayOutput), ctl_get_set_custom_mode_args_t.getCPtr(pCustomModeArgs));
    return ret;
  }

  public static ctl_result_t ctlGetSetCombinedDisplay(SWIGTYPE_p__ctl_device_adapter_handle_t hDeviceAdapter, ctl_combined_display_args_t pCombinedDisplayArgs) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlGetSetCombinedDisplay(SWIGTYPE_p__ctl_device_adapter_handle_t.getCPtr(hDeviceAdapter), ctl_combined_display_args_t.getCPtr(pCombinedDisplayArgs));
    return ret;
  }

  public static ctl_result_t ctlGetSetDisplayGenlock(SWIGTYPE_p_p__ctl_device_adapter_handle_t hDeviceAdapter, ctl_genlock_args_t pGenlockArgs, uint AdapterCount, SWIGTYPE_p_p__ctl_device_adapter_handle_t hFailureDeviceAdapter) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlGetSetDisplayGenlock(SWIGTYPE_p_p__ctl_device_adapter_handle_t.getCPtr(hDeviceAdapter), ctl_genlock_args_t.getCPtr(pGenlockArgs), AdapterCount, SWIGTYPE_p_p__ctl_device_adapter_handle_t.getCPtr(hFailureDeviceAdapter));
    return ret;
  }

  public static ctl_result_t ctlGetVblankTimestamp(SWIGTYPE_p__ctl_display_output_handle_t hDisplayOutput, ctl_vblank_ts_args_t pVblankTSArgs) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlGetVblankTimestamp(SWIGTYPE_p__ctl_display_output_handle_t.getCPtr(hDisplayOutput), ctl_vblank_ts_args_t.getCPtr(pVblankTSArgs));
    return ret;
  }

  public static ctl_result_t ctlLinkDisplayAdapters(SWIGTYPE_p__ctl_device_adapter_handle_t hPrimaryAdapter, ctl_lda_args_t pLdaArgs) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlLinkDisplayAdapters(SWIGTYPE_p__ctl_device_adapter_handle_t.getCPtr(hPrimaryAdapter), ctl_lda_args_t.getCPtr(pLdaArgs));
    return ret;
  }

  public static ctl_result_t ctlUnlinkDisplayAdapters(SWIGTYPE_p__ctl_device_adapter_handle_t hPrimaryAdapter) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlUnlinkDisplayAdapters(SWIGTYPE_p__ctl_device_adapter_handle_t.getCPtr(hPrimaryAdapter));
    return ret;
  }

  public static ctl_result_t ctlGetLinkedDisplayAdapters(SWIGTYPE_p__ctl_device_adapter_handle_t hPrimaryAdapter, ctl_lda_args_t pLdaArgs) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlGetLinkedDisplayAdapters(SWIGTYPE_p__ctl_device_adapter_handle_t.getCPtr(hPrimaryAdapter), ctl_lda_args_t.getCPtr(pLdaArgs));
    return ret;
  }

  public static ctl_result_t ctlGetSetDynamicContrastEnhancement(SWIGTYPE_p__ctl_display_output_handle_t hDisplayOutput, ctl_dce_args_t pDceArgs) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlGetSetDynamicContrastEnhancement(SWIGTYPE_p__ctl_display_output_handle_t.getCPtr(hDisplayOutput), ctl_dce_args_t.getCPtr(pDceArgs));
    return ret;
  }

  public static ctl_result_t ctlGetSetWireFormat(SWIGTYPE_p__ctl_display_output_handle_t hDisplayOutput, ctl_get_set_wire_format_config_t pGetSetWireFormatSetting) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlGetSetWireFormat(SWIGTYPE_p__ctl_display_output_handle_t.getCPtr(hDisplayOutput), ctl_get_set_wire_format_config_t.getCPtr(pGetSetWireFormatSetting));
    return ret;
  }

  public static ctl_result_t ctlGetSetDisplaySettings(SWIGTYPE_p__ctl_display_output_handle_t hDisplayOutput, ctl_display_settings_t pDisplaySettings) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlGetSetDisplaySettings(SWIGTYPE_p__ctl_display_output_handle_t.getCPtr(hDisplayOutput), ctl_display_settings_t.getCPtr(pDisplaySettings));
    return ret;
  }

  public static ctl_result_t ctlEccGetProperties(SWIGTYPE_p__ctl_device_adapter_handle_t hDAhandle, ctl_ecc_properties_t pProperties) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlEccGetProperties(SWIGTYPE_p__ctl_device_adapter_handle_t.getCPtr(hDAhandle), ctl_ecc_properties_t.getCPtr(pProperties));
    return ret;
  }

  public static ctl_result_t ctlEccGetState(SWIGTYPE_p__ctl_device_adapter_handle_t hDAhandle, ctl_ecc_state_desc_t pState) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlEccGetState(SWIGTYPE_p__ctl_device_adapter_handle_t.getCPtr(hDAhandle), ctl_ecc_state_desc_t.getCPtr(pState));
    return ret;
  }

  public static ctl_result_t ctlEccSetState(SWIGTYPE_p__ctl_device_adapter_handle_t hDAhandle, ctl_ecc_state_desc_t pState) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlEccSetState(SWIGTYPE_p__ctl_device_adapter_handle_t.getCPtr(hDAhandle), ctl_ecc_state_desc_t.getCPtr(pState));
    return ret;
  }

  public static ctl_result_t ctlEnumEngineGroups(SWIGTYPE_p__ctl_device_adapter_handle_t hDAhandle, SWIGTYPE_p_unsigned_int pCount, SWIGTYPE_p_p__ctl_engine_handle_t phEngine) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlEnumEngineGroups(SWIGTYPE_p__ctl_device_adapter_handle_t.getCPtr(hDAhandle), SWIGTYPE_p_unsigned_int.getCPtr(pCount), SWIGTYPE_p_p__ctl_engine_handle_t.getCPtr(phEngine));
    return ret;
  }

  public static ctl_result_t ctlEngineGetProperties(SWIGTYPE_p__ctl_engine_handle_t hEngine, ctl_engine_properties_t pProperties) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlEngineGetProperties(SWIGTYPE_p__ctl_engine_handle_t.getCPtr(hEngine), ctl_engine_properties_t.getCPtr(pProperties));
    return ret;
  }

  public static ctl_result_t ctlEngineGetActivity(SWIGTYPE_p__ctl_engine_handle_t hEngine, ctl_engine_stats_t pStats) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlEngineGetActivity(SWIGTYPE_p__ctl_engine_handle_t.getCPtr(hEngine), ctl_engine_stats_t.getCPtr(pStats));
    return ret;
  }

  public static ctl_result_t ctlEnumFans(SWIGTYPE_p__ctl_device_adapter_handle_t hDAhandle, SWIGTYPE_p_unsigned_int pCount, SWIGTYPE_p_p__ctl_fan_handle_t phFan) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlEnumFans(SWIGTYPE_p__ctl_device_adapter_handle_t.getCPtr(hDAhandle), SWIGTYPE_p_unsigned_int.getCPtr(pCount), SWIGTYPE_p_p__ctl_fan_handle_t.getCPtr(phFan));
    return ret;
  }

  public static ctl_result_t ctlFanGetProperties(SWIGTYPE_p__ctl_fan_handle_t hFan, ctl_fan_properties_t pProperties) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlFanGetProperties(SWIGTYPE_p__ctl_fan_handle_t.getCPtr(hFan), ctl_fan_properties_t.getCPtr(pProperties));
    return ret;
  }

  public static ctl_result_t ctlFanGetConfig(SWIGTYPE_p__ctl_fan_handle_t hFan, ctl_fan_config_t pConfig) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlFanGetConfig(SWIGTYPE_p__ctl_fan_handle_t.getCPtr(hFan), ctl_fan_config_t.getCPtr(pConfig));
    return ret;
  }

  public static ctl_result_t ctlFanSetDefaultMode(SWIGTYPE_p__ctl_fan_handle_t hFan) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlFanSetDefaultMode(SWIGTYPE_p__ctl_fan_handle_t.getCPtr(hFan));
    return ret;
  }

  public static ctl_result_t ctlFanSetFixedSpeedMode(SWIGTYPE_p__ctl_fan_handle_t hFan, ctl_fan_speed_t speed) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlFanSetFixedSpeedMode(SWIGTYPE_p__ctl_fan_handle_t.getCPtr(hFan), ctl_fan_speed_t.getCPtr(speed));
    return ret;
  }

  public static ctl_result_t ctlFanSetSpeedTableMode(SWIGTYPE_p__ctl_fan_handle_t hFan, ctl_fan_speed_table_t speedTable) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlFanSetSpeedTableMode(SWIGTYPE_p__ctl_fan_handle_t.getCPtr(hFan), ctl_fan_speed_table_t.getCPtr(speedTable));
    return ret;
  }

  public static ctl_result_t ctlFanGetState(SWIGTYPE_p__ctl_fan_handle_t hFan, ctl_fan_speed_units_t units, SWIGTYPE_p_int pSpeed) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlFanGetState(SWIGTYPE_p__ctl_fan_handle_t.getCPtr(hFan), (int)units, SWIGTYPE_p_int.getCPtr(pSpeed));
    return ret;
  }

  public static ctl_result_t ctlGetFirmwareProperties(SWIGTYPE_p__ctl_device_adapter_handle_t hDeviceAdapter, ctl_firmware_properties_t pProperties) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlGetFirmwareProperties(SWIGTYPE_p__ctl_device_adapter_handle_t.getCPtr(hDeviceAdapter), ctl_firmware_properties_t.getCPtr(pProperties));
    return ret;
  }

  public static ctl_result_t ctlEnumerateFirmwareComponents(SWIGTYPE_p__ctl_device_adapter_handle_t hDeviceAdapter, SWIGTYPE_p_unsigned_int pCount, SWIGTYPE_p_p__ctl_firmware_component_handle_t phFirmware) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlEnumerateFirmwareComponents(SWIGTYPE_p__ctl_device_adapter_handle_t.getCPtr(hDeviceAdapter), SWIGTYPE_p_unsigned_int.getCPtr(pCount), SWIGTYPE_p_p__ctl_firmware_component_handle_t.getCPtr(phFirmware));
    return ret;
  }

  public static ctl_result_t ctlGetFirmwareComponentProperties(SWIGTYPE_p__ctl_firmware_component_handle_t hFirmware, ctl_firmware_component_properties_t pProperties) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlGetFirmwareComponentProperties(SWIGTYPE_p__ctl_firmware_component_handle_t.getCPtr(hFirmware), ctl_firmware_component_properties_t.getCPtr(pProperties));
    return ret;
  }

  public static ctl_result_t ctlAllowPCIeLinkSpeedUpdate(SWIGTYPE_p__ctl_device_adapter_handle_t hDeviceAdapter, bool AllowPCIeLinkSpeedUpdate) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlAllowPCIeLinkSpeedUpdate(SWIGTYPE_p__ctl_device_adapter_handle_t.getCPtr(hDeviceAdapter), AllowPCIeLinkSpeedUpdate);
    return ret;
  }

  public static ctl_result_t ctlEnumFrequencyDomains(SWIGTYPE_p__ctl_device_adapter_handle_t hDAhandle, SWIGTYPE_p_unsigned_int pCount, SWIGTYPE_p_p__ctl_freq_handle_t phFrequency) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlEnumFrequencyDomains(SWIGTYPE_p__ctl_device_adapter_handle_t.getCPtr(hDAhandle), SWIGTYPE_p_unsigned_int.getCPtr(pCount), SWIGTYPE_p_p__ctl_freq_handle_t.getCPtr(phFrequency));
    return ret;
  }

  public static ctl_result_t ctlFrequencyGetProperties(SWIGTYPE_p__ctl_freq_handle_t hFrequency, ctl_freq_properties_t pProperties) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlFrequencyGetProperties(SWIGTYPE_p__ctl_freq_handle_t.getCPtr(hFrequency), ctl_freq_properties_t.getCPtr(pProperties));
    return ret;
  }

  public static ctl_result_t ctlFrequencyGetAvailableClocks(SWIGTYPE_p__ctl_freq_handle_t hFrequency, SWIGTYPE_p_unsigned_int pCount, SWIGTYPE_p_double phFrequency) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlFrequencyGetAvailableClocks(SWIGTYPE_p__ctl_freq_handle_t.getCPtr(hFrequency), SWIGTYPE_p_unsigned_int.getCPtr(pCount), SWIGTYPE_p_double.getCPtr(phFrequency));
    return ret;
  }

  public static ctl_result_t ctlFrequencyGetRange(SWIGTYPE_p__ctl_freq_handle_t hFrequency, ctl_freq_range_t pLimits) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlFrequencyGetRange(SWIGTYPE_p__ctl_freq_handle_t.getCPtr(hFrequency), ctl_freq_range_t.getCPtr(pLimits));
    return ret;
  }

  public static ctl_result_t ctlFrequencySetRange(SWIGTYPE_p__ctl_freq_handle_t hFrequency, ctl_freq_range_t pLimits) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlFrequencySetRange(SWIGTYPE_p__ctl_freq_handle_t.getCPtr(hFrequency), ctl_freq_range_t.getCPtr(pLimits));
    return ret;
  }

  public static ctl_result_t ctlFrequencyGetState(SWIGTYPE_p__ctl_freq_handle_t hFrequency, ctl_freq_state_t pState) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlFrequencyGetState(SWIGTYPE_p__ctl_freq_handle_t.getCPtr(hFrequency), ctl_freq_state_t.getCPtr(pState));
    return ret;
  }

  public static ctl_result_t ctlFrequencyGetThrottleTime(SWIGTYPE_p__ctl_freq_handle_t hFrequency, ctl_freq_throttle_time_t pThrottleTime) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlFrequencyGetThrottleTime(SWIGTYPE_p__ctl_freq_handle_t.getCPtr(hFrequency), ctl_freq_throttle_time_t.getCPtr(pThrottleTime));
    return ret;
  }

  public static ctl_result_t ctlEnumLeds(SWIGTYPE_p__ctl_device_adapter_handle_t hDAhandle, SWIGTYPE_p_unsigned_int pCount, SWIGTYPE_p_p__ctl_led_handle_t phLed) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlEnumLeds(SWIGTYPE_p__ctl_device_adapter_handle_t.getCPtr(hDAhandle), SWIGTYPE_p_unsigned_int.getCPtr(pCount), SWIGTYPE_p_p__ctl_led_handle_t.getCPtr(phLed));
    return ret;
  }

  public static ctl_result_t ctlLedGetProperties(SWIGTYPE_p__ctl_led_handle_t hLed, ctl_led_properties_t pProperties) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlLedGetProperties(SWIGTYPE_p__ctl_led_handle_t.getCPtr(hLed), ctl_led_properties_t.getCPtr(pProperties));
    return ret;
  }

  public static ctl_result_t ctlLedGetState(SWIGTYPE_p__ctl_led_handle_t hLed, ctl_led_state_t pState) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlLedGetState(SWIGTYPE_p__ctl_led_handle_t.getCPtr(hLed), ctl_led_state_t.getCPtr(pState));
    return ret;
  }

  public static ctl_result_t ctlLedSetState(SWIGTYPE_p__ctl_led_handle_t hLed, SWIGTYPE_p_void pBuffer, uint bufferSize) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlLedSetState(SWIGTYPE_p__ctl_led_handle_t.getCPtr(hLed), SWIGTYPE_p_void.getCPtr(pBuffer), bufferSize);
    return ret;
  }

  public static ctl_result_t ctlGetSupportedVideoProcessingCapabilities(SWIGTYPE_p__ctl_device_adapter_handle_t hDAhandle, ctl_video_processing_feature_caps_t pFeatureCaps) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlGetSupportedVideoProcessingCapabilities(SWIGTYPE_p__ctl_device_adapter_handle_t.getCPtr(hDAhandle), ctl_video_processing_feature_caps_t.getCPtr(pFeatureCaps));
    return ret;
  }

  public static ctl_result_t ctlGetSetVideoProcessingFeature(SWIGTYPE_p__ctl_device_adapter_handle_t hDAhandle, ctl_video_processing_feature_getset_t pFeature) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlGetSetVideoProcessingFeature(SWIGTYPE_p__ctl_device_adapter_handle_t.getCPtr(hDAhandle), ctl_video_processing_feature_getset_t.getCPtr(pFeature));
    return ret;
  }

  public static ctl_result_t ctlEnumMemoryModules(SWIGTYPE_p__ctl_device_adapter_handle_t hDAhandle, SWIGTYPE_p_unsigned_int pCount, SWIGTYPE_p_p__ctl_mem_handle_t phMemory) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlEnumMemoryModules(SWIGTYPE_p__ctl_device_adapter_handle_t.getCPtr(hDAhandle), SWIGTYPE_p_unsigned_int.getCPtr(pCount), SWIGTYPE_p_p__ctl_mem_handle_t.getCPtr(phMemory));
    return ret;
  }

  public static ctl_result_t ctlMemoryGetProperties(SWIGTYPE_p__ctl_mem_handle_t hMemory, ctl_mem_properties_t pProperties) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlMemoryGetProperties(SWIGTYPE_p__ctl_mem_handle_t.getCPtr(hMemory), ctl_mem_properties_t.getCPtr(pProperties));
    return ret;
  }

  public static ctl_result_t ctlMemoryGetState(SWIGTYPE_p__ctl_mem_handle_t hMemory, ctl_mem_state_t pState) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlMemoryGetState(SWIGTYPE_p__ctl_mem_handle_t.getCPtr(hMemory), ctl_mem_state_t.getCPtr(pState));
    return ret;
  }

  public static ctl_result_t ctlMemoryGetBandwidth(SWIGTYPE_p__ctl_mem_handle_t hMemory, ctl_mem_bandwidth_t pBandwidth) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlMemoryGetBandwidth(SWIGTYPE_p__ctl_mem_handle_t.getCPtr(hMemory), ctl_mem_bandwidth_t.getCPtr(pBandwidth));
    return ret;
  }

  public static ctl_result_t ctlOverclockGetProperties(SWIGTYPE_p__ctl_device_adapter_handle_t hDeviceHandle, ctl_oc_properties_t pOcProperties) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlOverclockGetProperties(SWIGTYPE_p__ctl_device_adapter_handle_t.getCPtr(hDeviceHandle), ctl_oc_properties_t.getCPtr(pOcProperties));
    return ret;
  }

  public static ctl_result_t ctlOverclockWaiverSet(SWIGTYPE_p__ctl_device_adapter_handle_t hDeviceHandle) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlOverclockWaiverSet(SWIGTYPE_p__ctl_device_adapter_handle_t.getCPtr(hDeviceHandle));
    return ret;
  }

  public static ctl_result_t ctlOverclockGpuFrequencyOffsetGet(SWIGTYPE_p__ctl_device_adapter_handle_t hDeviceHandle, SWIGTYPE_p_double pOcFrequencyOffset) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlOverclockGpuFrequencyOffsetGet(SWIGTYPE_p__ctl_device_adapter_handle_t.getCPtr(hDeviceHandle), SWIGTYPE_p_double.getCPtr(pOcFrequencyOffset));
    return ret;
  }

  public static ctl_result_t ctlOverclockGpuFrequencyOffsetSet(SWIGTYPE_p__ctl_device_adapter_handle_t hDeviceHandle, double ocFrequencyOffset) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlOverclockGpuFrequencyOffsetSet(SWIGTYPE_p__ctl_device_adapter_handle_t.getCPtr(hDeviceHandle), ocFrequencyOffset);
    return ret;
  }

  public static ctl_result_t ctlOverclockGpuVoltageOffsetGet(SWIGTYPE_p__ctl_device_adapter_handle_t hDeviceHandle, SWIGTYPE_p_double pOcVoltageOffset) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlOverclockGpuVoltageOffsetGet(SWIGTYPE_p__ctl_device_adapter_handle_t.getCPtr(hDeviceHandle), SWIGTYPE_p_double.getCPtr(pOcVoltageOffset));
    return ret;
  }

  public static ctl_result_t ctlOverclockGpuVoltageOffsetSet(SWIGTYPE_p__ctl_device_adapter_handle_t hDeviceHandle, double ocVoltageOffset) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlOverclockGpuVoltageOffsetSet(SWIGTYPE_p__ctl_device_adapter_handle_t.getCPtr(hDeviceHandle), ocVoltageOffset);
    return ret;
  }

  public static ctl_result_t ctlOverclockGpuLockGet(SWIGTYPE_p__ctl_device_adapter_handle_t hDeviceHandle, ctl_oc_vf_pair_t pVfPair) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlOverclockGpuLockGet(SWIGTYPE_p__ctl_device_adapter_handle_t.getCPtr(hDeviceHandle), ctl_oc_vf_pair_t.getCPtr(pVfPair));
    return ret;
  }

  public static ctl_result_t ctlOverclockGpuLockSet(SWIGTYPE_p__ctl_device_adapter_handle_t hDeviceHandle, ctl_oc_vf_pair_t vFPair) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlOverclockGpuLockSet(SWIGTYPE_p__ctl_device_adapter_handle_t.getCPtr(hDeviceHandle), ctl_oc_vf_pair_t.getCPtr(vFPair));
    if (CtlLibraryPINVOKE.SWIGPendingException.Pending) throw CtlLibraryPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ctl_result_t ctlOverclockVramFrequencyOffsetGet(SWIGTYPE_p__ctl_device_adapter_handle_t hDeviceHandle, SWIGTYPE_p_double pOcFrequencyOffset) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlOverclockVramFrequencyOffsetGet(SWIGTYPE_p__ctl_device_adapter_handle_t.getCPtr(hDeviceHandle), SWIGTYPE_p_double.getCPtr(pOcFrequencyOffset));
    return ret;
  }

  public static ctl_result_t ctlOverclockVramFrequencyOffsetSet(SWIGTYPE_p__ctl_device_adapter_handle_t hDeviceHandle, double ocFrequencyOffset) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlOverclockVramFrequencyOffsetSet(SWIGTYPE_p__ctl_device_adapter_handle_t.getCPtr(hDeviceHandle), ocFrequencyOffset);
    return ret;
  }

  public static ctl_result_t ctlOverclockVramVoltageOffsetGet(SWIGTYPE_p__ctl_device_adapter_handle_t hDeviceHandle, SWIGTYPE_p_double pVoltage) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlOverclockVramVoltageOffsetGet(SWIGTYPE_p__ctl_device_adapter_handle_t.getCPtr(hDeviceHandle), SWIGTYPE_p_double.getCPtr(pVoltage));
    return ret;
  }

  public static ctl_result_t ctlOverclockVramVoltageOffsetSet(SWIGTYPE_p__ctl_device_adapter_handle_t hDeviceHandle, double voltage) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlOverclockVramVoltageOffsetSet(SWIGTYPE_p__ctl_device_adapter_handle_t.getCPtr(hDeviceHandle), voltage);
    return ret;
  }

  public static ctl_result_t ctlOverclockPowerLimitGet(SWIGTYPE_p__ctl_device_adapter_handle_t hDeviceHandle, SWIGTYPE_p_double pSustainedPowerLimit) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlOverclockPowerLimitGet(SWIGTYPE_p__ctl_device_adapter_handle_t.getCPtr(hDeviceHandle), SWIGTYPE_p_double.getCPtr(pSustainedPowerLimit));
    return ret;
  }

  public static ctl_result_t ctlOverclockPowerLimitSet(SWIGTYPE_p__ctl_device_adapter_handle_t hDeviceHandle, double sustainedPowerLimit) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlOverclockPowerLimitSet(SWIGTYPE_p__ctl_device_adapter_handle_t.getCPtr(hDeviceHandle), sustainedPowerLimit);
    return ret;
  }

  public static ctl_result_t ctlOverclockTemperatureLimitGet(SWIGTYPE_p__ctl_device_adapter_handle_t hDeviceHandle, SWIGTYPE_p_double pTemperatureLimit) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlOverclockTemperatureLimitGet(SWIGTYPE_p__ctl_device_adapter_handle_t.getCPtr(hDeviceHandle), SWIGTYPE_p_double.getCPtr(pTemperatureLimit));
    return ret;
  }

  public static ctl_result_t ctlOverclockTemperatureLimitSet(SWIGTYPE_p__ctl_device_adapter_handle_t hDeviceHandle, double temperatureLimit) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlOverclockTemperatureLimitSet(SWIGTYPE_p__ctl_device_adapter_handle_t.getCPtr(hDeviceHandle), temperatureLimit);
    return ret;
  }

  public static ctl_result_t ctlPowerTelemetryGet(SWIGTYPE_p__ctl_device_adapter_handle_t hDeviceHandle, ctl_power_telemetry_t pTelemetryInfo) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlPowerTelemetryGet(SWIGTYPE_p__ctl_device_adapter_handle_t.getCPtr(hDeviceHandle), ctl_power_telemetry_t.getCPtr(pTelemetryInfo));
    return ret;
  }

  public static ctl_result_t ctlOverclockResetToDefault(SWIGTYPE_p__ctl_device_adapter_handle_t hDeviceHandle) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlOverclockResetToDefault(SWIGTYPE_p__ctl_device_adapter_handle_t.getCPtr(hDeviceHandle));
    return ret;
  }

  public static ctl_result_t ctlOverclockGpuFrequencyOffsetGetV2(SWIGTYPE_p__ctl_device_adapter_handle_t hDeviceHandle, SWIGTYPE_p_double pOcFrequencyOffset) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlOverclockGpuFrequencyOffsetGetV2(SWIGTYPE_p__ctl_device_adapter_handle_t.getCPtr(hDeviceHandle), SWIGTYPE_p_double.getCPtr(pOcFrequencyOffset));
    return ret;
  }

  public static ctl_result_t ctlOverclockGpuFrequencyOffsetSetV2(SWIGTYPE_p__ctl_device_adapter_handle_t hDeviceHandle, double ocFrequencyOffset) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlOverclockGpuFrequencyOffsetSetV2(SWIGTYPE_p__ctl_device_adapter_handle_t.getCPtr(hDeviceHandle), ocFrequencyOffset);
    return ret;
  }

  public static ctl_result_t ctlOverclockGpuMaxVoltageOffsetGetV2(SWIGTYPE_p__ctl_device_adapter_handle_t hDeviceHandle, SWIGTYPE_p_double pOcMaxVoltageOffset) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlOverclockGpuMaxVoltageOffsetGetV2(SWIGTYPE_p__ctl_device_adapter_handle_t.getCPtr(hDeviceHandle), SWIGTYPE_p_double.getCPtr(pOcMaxVoltageOffset));
    return ret;
  }

  public static ctl_result_t ctlOverclockGpuMaxVoltageOffsetSetV2(SWIGTYPE_p__ctl_device_adapter_handle_t hDeviceHandle, double ocMaxVoltageOffset) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlOverclockGpuMaxVoltageOffsetSetV2(SWIGTYPE_p__ctl_device_adapter_handle_t.getCPtr(hDeviceHandle), ocMaxVoltageOffset);
    return ret;
  }

  public static ctl_result_t ctlOverclockVramMemSpeedLimitGetV2(SWIGTYPE_p__ctl_device_adapter_handle_t hDeviceHandle, SWIGTYPE_p_double pOcVramMemSpeedLimit) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlOverclockVramMemSpeedLimitGetV2(SWIGTYPE_p__ctl_device_adapter_handle_t.getCPtr(hDeviceHandle), SWIGTYPE_p_double.getCPtr(pOcVramMemSpeedLimit));
    return ret;
  }

  public static ctl_result_t ctlOverclockVramMemSpeedLimitSetV2(SWIGTYPE_p__ctl_device_adapter_handle_t hDeviceHandle, double ocVramMemSpeedLimit) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlOverclockVramMemSpeedLimitSetV2(SWIGTYPE_p__ctl_device_adapter_handle_t.getCPtr(hDeviceHandle), ocVramMemSpeedLimit);
    return ret;
  }

  public static ctl_result_t ctlOverclockPowerLimitGetV2(SWIGTYPE_p__ctl_device_adapter_handle_t hDeviceHandle, SWIGTYPE_p_double pSustainedPowerLimit) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlOverclockPowerLimitGetV2(SWIGTYPE_p__ctl_device_adapter_handle_t.getCPtr(hDeviceHandle), SWIGTYPE_p_double.getCPtr(pSustainedPowerLimit));
    return ret;
  }

  public static ctl_result_t ctlOverclockPowerLimitSetV2(SWIGTYPE_p__ctl_device_adapter_handle_t hDeviceHandle, double sustainedPowerLimit) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlOverclockPowerLimitSetV2(SWIGTYPE_p__ctl_device_adapter_handle_t.getCPtr(hDeviceHandle), sustainedPowerLimit);
    return ret;
  }

  public static ctl_result_t ctlOverclockTemperatureLimitGetV2(SWIGTYPE_p__ctl_device_adapter_handle_t hDeviceHandle, SWIGTYPE_p_double pTemperatureLimit) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlOverclockTemperatureLimitGetV2(SWIGTYPE_p__ctl_device_adapter_handle_t.getCPtr(hDeviceHandle), SWIGTYPE_p_double.getCPtr(pTemperatureLimit));
    return ret;
  }

  public static ctl_result_t ctlOverclockTemperatureLimitSetV2(SWIGTYPE_p__ctl_device_adapter_handle_t hDeviceHandle, double temperatureLimit) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlOverclockTemperatureLimitSetV2(SWIGTYPE_p__ctl_device_adapter_handle_t.getCPtr(hDeviceHandle), temperatureLimit);
    return ret;
  }

  public static ctl_result_t ctlOverclockReadVFCurve(SWIGTYPE_p__ctl_device_adapter_handle_t hDeviceAdapter, ctl_vf_curve_type_t VFCurveType, ctl_vf_curve_details_t VFCurveDetail, SWIGTYPE_p_unsigned_int pNumPoints, ctl_voltage_frequency_point_t pVFCurveTable) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlOverclockReadVFCurve(SWIGTYPE_p__ctl_device_adapter_handle_t.getCPtr(hDeviceAdapter), (int)VFCurveType, (int)VFCurveDetail, SWIGTYPE_p_unsigned_int.getCPtr(pNumPoints), ctl_voltage_frequency_point_t.getCPtr(pVFCurveTable));
    return ret;
  }

  public static ctl_result_t ctlOverclockWriteCustomVFCurve(SWIGTYPE_p__ctl_device_adapter_handle_t hDeviceAdapter, uint NumPoints, ctl_voltage_frequency_point_t pCustomVFCurveTable) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlOverclockWriteCustomVFCurve(SWIGTYPE_p__ctl_device_adapter_handle_t.getCPtr(hDeviceAdapter), NumPoints, ctl_voltage_frequency_point_t.getCPtr(pCustomVFCurveTable));
    return ret;
  }

  public static ctl_result_t ctlPciGetProperties(SWIGTYPE_p__ctl_device_adapter_handle_t hDAhandle, ctl_pci_properties_t pProperties) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlPciGetProperties(SWIGTYPE_p__ctl_device_adapter_handle_t.getCPtr(hDAhandle), ctl_pci_properties_t.getCPtr(pProperties));
    return ret;
  }

  public static ctl_result_t ctlPciGetState(SWIGTYPE_p__ctl_device_adapter_handle_t hDAhandle, ctl_pci_state_t pState) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlPciGetState(SWIGTYPE_p__ctl_device_adapter_handle_t.getCPtr(hDAhandle), ctl_pci_state_t.getCPtr(pState));
    return ret;
  }

  public static ctl_result_t ctlEnumPowerDomains(SWIGTYPE_p__ctl_device_adapter_handle_t hDAhandle, SWIGTYPE_p_unsigned_int pCount, SWIGTYPE_p_p__ctl_pwr_handle_t phPower) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlEnumPowerDomains(SWIGTYPE_p__ctl_device_adapter_handle_t.getCPtr(hDAhandle), SWIGTYPE_p_unsigned_int.getCPtr(pCount), SWIGTYPE_p_p__ctl_pwr_handle_t.getCPtr(phPower));
    return ret;
  }

  public static ctl_result_t ctlPowerGetProperties(SWIGTYPE_p__ctl_pwr_handle_t hPower, ctl_power_properties_t pProperties) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlPowerGetProperties(SWIGTYPE_p__ctl_pwr_handle_t.getCPtr(hPower), ctl_power_properties_t.getCPtr(pProperties));
    return ret;
  }

  public static ctl_result_t ctlPowerGetEnergyCounter(SWIGTYPE_p__ctl_pwr_handle_t hPower, ctl_power_energy_counter_t pEnergy) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlPowerGetEnergyCounter(SWIGTYPE_p__ctl_pwr_handle_t.getCPtr(hPower), ctl_power_energy_counter_t.getCPtr(pEnergy));
    return ret;
  }

  public static ctl_result_t ctlPowerGetLimits(SWIGTYPE_p__ctl_pwr_handle_t hPower, ctl_power_limits_t pPowerLimits) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlPowerGetLimits(SWIGTYPE_p__ctl_pwr_handle_t.getCPtr(hPower), ctl_power_limits_t.getCPtr(pPowerLimits));
    return ret;
  }

  public static ctl_result_t ctlPowerSetLimits(SWIGTYPE_p__ctl_pwr_handle_t hPower, ctl_power_limits_t pPowerLimits) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlPowerSetLimits(SWIGTYPE_p__ctl_pwr_handle_t.getCPtr(hPower), ctl_power_limits_t.getCPtr(pPowerLimits));
    return ret;
  }

  public static ctl_result_t ctlEnumTemperatureSensors(SWIGTYPE_p__ctl_device_adapter_handle_t hDAhandle, SWIGTYPE_p_unsigned_int pCount, SWIGTYPE_p_p__ctl_temp_handle_t phTemperature) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlEnumTemperatureSensors(SWIGTYPE_p__ctl_device_adapter_handle_t.getCPtr(hDAhandle), SWIGTYPE_p_unsigned_int.getCPtr(pCount), SWIGTYPE_p_p__ctl_temp_handle_t.getCPtr(phTemperature));
    return ret;
  }

  public static ctl_result_t ctlTemperatureGetProperties(SWIGTYPE_p__ctl_temp_handle_t hTemperature, ctl_temp_properties_t pProperties) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlTemperatureGetProperties(SWIGTYPE_p__ctl_temp_handle_t.getCPtr(hTemperature), ctl_temp_properties_t.getCPtr(pProperties));
    return ret;
  }

  public static ctl_result_t ctlTemperatureGetState(SWIGTYPE_p__ctl_temp_handle_t hTemperature, SWIGTYPE_p_double pTemperature) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.ctlTemperatureGetState(SWIGTYPE_p__ctl_temp_handle_t.getCPtr(hTemperature), SWIGTYPE_p_double.getCPtr(pTemperature));
    return ret;
  }

  public static SWIGTYPE_p_HINSTANCE hinstLib {
    set {
      CtlLibraryPINVOKE.hinstLib_set(SWIGTYPE_p_HINSTANCE.getCPtr(value));
      if (CtlLibraryPINVOKE.SWIGPendingException.Pending) throw CtlLibraryPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_HINSTANCE ret = new SWIGTYPE_p_HINSTANCE(CtlLibraryPINVOKE.hinstLib_get(), true);
      if (CtlLibraryPINVOKE.SWIGPendingException.Pending) throw CtlLibraryPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static ctl_runtime_path_args_t pRuntimeArgs {
    set {
      CtlLibraryPINVOKE.pRuntimeArgs_set(ctl_runtime_path_args_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = CtlLibraryPINVOKE.pRuntimeArgs_get();
      ctl_runtime_path_args_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new ctl_runtime_path_args_t(cPtr, false);
      return ret;
    } 
  }

  public static SWIGTYPE_p_HINSTANCE GetLoaderHandle() {
    SWIGTYPE_p_HINSTANCE ret = new SWIGTYPE_p_HINSTANCE(CtlLibraryPINVOKE.GetLoaderHandle(), true);
    return ret;
  }

  public static ctl_result_t GetControlAPIDLLPath(ctl_init_args_t pInitArgs, SWIGTYPE_p_wchar_t pwcDLLPath) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.GetControlAPIDLLPath(ctl_init_args_t.getCPtr(pInitArgs), SWIGTYPE_p_wchar_t.getCPtr(pwcDLLPath));
    return ret;
  }

  public static int tableNumPoints {
    get {
      int ret = CtlLibraryPINVOKE.tableNumPoints_get();
      return ret;
    } 
  }

  public static ctl_result_t SetFlatFanSpeedTable(SWIGTYPE_p__ctl_fan_handle_t fanHandle, ctl_fan_speed_table_t table, int speedPercent) {
    ctl_result_t ret = (ctl_result_t)CtlLibraryPINVOKE.SetFlatFanSpeedTable(SWIGTYPE_p__ctl_fan_handle_t.getCPtr(fanHandle), ctl_fan_speed_table_t.getCPtr(table), speedPercent);
    return ret;
  }

  public static ctl_init_args_t create_Init_Args() {
    ctl_init_args_t ret = new ctl_init_args_t(CtlLibraryPINVOKE.create_Init_Args(), true);
    return ret;
  }

  public static ctl_init_args_t new_ctl_init_args_t_Ptr() {
    global::System.IntPtr cPtr = CtlLibraryPINVOKE.new_ctl_init_args_t_Ptr();
    ctl_init_args_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new ctl_init_args_t(cPtr, false);
    return ret;
  }

  public static ctl_init_args_t copy_ctl_init_args_t_Ptr(ctl_init_args_t value) {
    global::System.IntPtr cPtr = CtlLibraryPINVOKE.copy_ctl_init_args_t_Ptr(ctl_init_args_t.getCPtr(value));
    ctl_init_args_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new ctl_init_args_t(cPtr, false);
    if (CtlLibraryPINVOKE.SWIGPendingException.Pending) throw CtlLibraryPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void delete_ctl_init_args_t_Ptr(ctl_init_args_t obj) {
    CtlLibraryPINVOKE.delete_ctl_init_args_t_Ptr(ctl_init_args_t.getCPtr(obj));
  }

  public static void ctl_init_args_t_Ptr_assign(ctl_init_args_t obj, ctl_init_args_t value) {
    CtlLibraryPINVOKE.ctl_init_args_t_Ptr_assign(ctl_init_args_t.getCPtr(obj), ctl_init_args_t.getCPtr(value));
    if (CtlLibraryPINVOKE.SWIGPendingException.Pending) throw CtlLibraryPINVOKE.SWIGPendingException.Retrieve();
  }

  public static ctl_init_args_t ctl_init_args_t_Ptr_value(ctl_init_args_t obj) {
    ctl_init_args_t ret = new ctl_init_args_t(CtlLibraryPINVOKE.ctl_init_args_t_Ptr_value(ctl_init_args_t.getCPtr(obj)), true);
    return ret;
  }

  public static SWIGTYPE_p_unsigned_int new_unsigned_int_Ptr() {
    global::System.IntPtr cPtr = CtlLibraryPINVOKE.new_unsigned_int_Ptr();
    SWIGTYPE_p_unsigned_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_int(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_unsigned_int copy_unsigned_int_Ptr(uint value) {
    global::System.IntPtr cPtr = CtlLibraryPINVOKE.copy_unsigned_int_Ptr(value);
    SWIGTYPE_p_unsigned_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_int(cPtr, false);
    return ret;
  }

  public static void delete_unsigned_int_Ptr(SWIGTYPE_p_unsigned_int obj) {
    CtlLibraryPINVOKE.delete_unsigned_int_Ptr(SWIGTYPE_p_unsigned_int.getCPtr(obj));
  }

  public static void unsigned_int_Ptr_assign(SWIGTYPE_p_unsigned_int obj, uint value) {
    CtlLibraryPINVOKE.unsigned_int_Ptr_assign(SWIGTYPE_p_unsigned_int.getCPtr(obj), value);
  }

  public static uint unsigned_int_Ptr_value(SWIGTYPE_p_unsigned_int obj) {
    uint ret = CtlLibraryPINVOKE.unsigned_int_Ptr_value(SWIGTYPE_p_unsigned_int.getCPtr(obj));
    return ret;
  }

  public static SWIGTYPE_p_int new_int_Ptr() {
    global::System.IntPtr cPtr = CtlLibraryPINVOKE.new_int_Ptr();
    SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_int copy_int_Ptr(int value) {
    global::System.IntPtr cPtr = CtlLibraryPINVOKE.copy_int_Ptr(value);
    SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
    return ret;
  }

  public static void delete_int_Ptr(SWIGTYPE_p_int obj) {
    CtlLibraryPINVOKE.delete_int_Ptr(SWIGTYPE_p_int.getCPtr(obj));
  }

  public static void int_Ptr_assign(SWIGTYPE_p_int obj, int value) {
    CtlLibraryPINVOKE.int_Ptr_assign(SWIGTYPE_p_int.getCPtr(obj), value);
  }

  public static int int_Ptr_value(SWIGTYPE_p_int obj) {
    int ret = CtlLibraryPINVOKE.int_Ptr_value(SWIGTYPE_p_int.getCPtr(obj));
    return ret;
  }

  public static SWIGTYPE_p_double new_double_Ptr() {
    global::System.IntPtr cPtr = CtlLibraryPINVOKE.new_double_Ptr();
    SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_double copy_double_Ptr(double value) {
    global::System.IntPtr cPtr = CtlLibraryPINVOKE.copy_double_Ptr(value);
    SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
    return ret;
  }

  public static void delete_double_Ptr(SWIGTYPE_p_double obj) {
    CtlLibraryPINVOKE.delete_double_Ptr(SWIGTYPE_p_double.getCPtr(obj));
  }

  public static void double_Ptr_assign(SWIGTYPE_p_double obj, double value) {
    CtlLibraryPINVOKE.double_Ptr_assign(SWIGTYPE_p_double.getCPtr(obj), value);
  }

  public static double double_Ptr_value(SWIGTYPE_p_double obj) {
    double ret = CtlLibraryPINVOKE.double_Ptr_value(SWIGTYPE_p_double.getCPtr(obj));
    return ret;
  }

  public static SWIGTYPE_p_p__ctl_api_handle_t new_ctl_api_handle_t_Ptr() {
    global::System.IntPtr cPtr = CtlLibraryPINVOKE.new_ctl_api_handle_t_Ptr();
    SWIGTYPE_p_p__ctl_api_handle_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_p__ctl_api_handle_t(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_p__ctl_api_handle_t copy_ctl_api_handle_t_Ptr(SWIGTYPE_p__ctl_api_handle_t value) {
    global::System.IntPtr cPtr = CtlLibraryPINVOKE.copy_ctl_api_handle_t_Ptr(SWIGTYPE_p__ctl_api_handle_t.getCPtr(value));
    SWIGTYPE_p_p__ctl_api_handle_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_p__ctl_api_handle_t(cPtr, false);
    return ret;
  }

  public static void delete_ctl_api_handle_t_Ptr(SWIGTYPE_p_p__ctl_api_handle_t obj) {
    CtlLibraryPINVOKE.delete_ctl_api_handle_t_Ptr(SWIGTYPE_p_p__ctl_api_handle_t.getCPtr(obj));
  }

  public static void ctl_api_handle_t_Ptr_assign(SWIGTYPE_p_p__ctl_api_handle_t obj, SWIGTYPE_p__ctl_api_handle_t value) {
    CtlLibraryPINVOKE.ctl_api_handle_t_Ptr_assign(SWIGTYPE_p_p__ctl_api_handle_t.getCPtr(obj), SWIGTYPE_p__ctl_api_handle_t.getCPtr(value));
  }

  public static SWIGTYPE_p__ctl_api_handle_t ctl_api_handle_t_Ptr_value(SWIGTYPE_p_p__ctl_api_handle_t obj) {
    global::System.IntPtr cPtr = CtlLibraryPINVOKE.ctl_api_handle_t_Ptr_value(SWIGTYPE_p_p__ctl_api_handle_t.getCPtr(obj));
    SWIGTYPE_p__ctl_api_handle_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p__ctl_api_handle_t(cPtr, false);
    return ret;
  }

  public static readonly int CTL_IMPL_MAJOR_VERSION = CtlLibraryPINVOKE.CTL_IMPL_MAJOR_VERSION_get();
  public static readonly int CTL_IMPL_MINOR_VERSION = CtlLibraryPINVOKE.CTL_IMPL_MINOR_VERSION_get();
  public static readonly int CTL_IMPL_VERSION = CtlLibraryPINVOKE.CTL_IMPL_VERSION_get();
  public static readonly int CTL_MAX_DEVICE_NAME_LEN = CtlLibraryPINVOKE.CTL_MAX_DEVICE_NAME_LEN_get();
  public static readonly int CTL_MAX_RESERVED_SIZE = CtlLibraryPINVOKE.CTL_MAX_RESERVED_SIZE_get();
  public static readonly int CTL_I2C_MAX_DATA_SIZE = CtlLibraryPINVOKE.CTL_I2C_MAX_DATA_SIZE_get();
  public static readonly int CTL_AUX_MAX_DATA_SIZE = CtlLibraryPINVOKE.CTL_AUX_MAX_DATA_SIZE_get();
  public static readonly int CTL_MAX_NUM_SAMPLES_PER_CHANNEL_1D_LUT = CtlLibraryPINVOKE.CTL_MAX_NUM_SAMPLES_PER_CHANNEL_1D_LUT_get();
  public static readonly int CTL_MAX_DISPLAYS_FOR_MGPU_COLLAGE = CtlLibraryPINVOKE.CTL_MAX_DISPLAYS_FOR_MGPU_COLLAGE_get();
  public static readonly int CTL_MAX_WIREFORMAT_COLOR_MODELS_SUPPORTED = CtlLibraryPINVOKE.CTL_MAX_WIREFORMAT_COLOR_MODELS_SUPPORTED_get();
  public static readonly int CTL_FAN_TEMP_SPEED_PAIR_COUNT = CtlLibraryPINVOKE.CTL_FAN_TEMP_SPEED_PAIR_COUNT_get();
  public static readonly int CTL_FIRMWARE_PROPERTY_STR_SIZE = CtlLibraryPINVOKE.CTL_FIRMWARE_PROPERTY_STR_SIZE_get();
  public static readonly int CTL_MAX_FIRMWARE_PROPERTIES_RESERVED_SIZE = CtlLibraryPINVOKE.CTL_MAX_FIRMWARE_PROPERTIES_RESERVED_SIZE_get();
  public static readonly int CTL_MAX_FIRMWARE_COMPONENT_PROPERTIES_RESERVED_SIZE = CtlLibraryPINVOKE.CTL_MAX_FIRMWARE_COMPONENT_PROPERTIES_RESERVED_SIZE_get();
  public static readonly int CTL_PSU_COUNT = CtlLibraryPINVOKE.CTL_PSU_COUNT_get();
  public static readonly int CTL_FAN_COUNT = CtlLibraryPINVOKE.CTL_FAN_COUNT_get();
  public static readonly SWIGTYPE_p_wchar_t CTL_DLL_NAME = new SWIGTYPE_p_wchar_t(CtlLibraryPINVOKE.CTL_DLL_NAME_get(), false);
  public static readonly int CTL_DLL_PATH_LEN = CtlLibraryPINVOKE.CTL_DLL_PATH_LEN_get();
}

}
